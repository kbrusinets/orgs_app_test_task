"""initial migration

Revision ID: 93110f5e937a
Revises:
Create Date: 2025-05-11 02:19:12.858577

"""

from typing import Sequence, Union

import geoalchemy2
import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "93110f5e937a"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    op.execute(
        """
        CREATE EXTENSION IF NOT EXISTS postgis;
    """
    )
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "address",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "coordinates",
            geoalchemy2.types.Geography(
                geometry_type="POINT",
                srid=4326,
                from_text="ST_GeogFromText",
                name="geography",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.Column("country", sa.String(), nullable=False),
        sa.Column("city", sa.String(), nullable=False),
        sa.Column("street", sa.String(), nullable=False),
        sa.Column("home", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("coordinates"),
    )
    op.create_index(
        "idx_address_coordinates_gist",
        "address",
        ["coordinates"],
        unique=False,
        postgresql_using="gist",
    )
    op.create_table(
        "category",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("parent_id", sa.Integer(), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "organization",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("address_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["address_id"],
            ["address.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "organization_category",
        sa.Column("org_id", sa.Integer(), nullable=False),
        sa.Column("cat_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["cat_id"],
            ["category.id"],
        ),
        sa.ForeignKeyConstraint(
            ["org_id"],
            ["organization.id"],
        ),
        sa.PrimaryKeyConstraint("org_id", "cat_id"),
    )
    op.create_table(
        "phone_number",
        sa.Column("number", sa.String(), nullable=False),
        sa.Column("org_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["org_id"],
            ["organization.id"],
        ),
        sa.PrimaryKeyConstraint("number"),
    )
    op.create_table(
        "api_key",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("api_key", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("user_id"),
        sa.UniqueConstraint("api_key"),
    )
    # ### end Alembic commands ###

    op.execute(
        """
        CREATE EXTENSION IF NOT EXISTS pg_trgm;
    """
    )
    op.execute(
        """
        CREATE INDEX idx_org_name_trgm ON organization USING gin (name gin_trgm_ops);
    """
    )
    op.execute(
        """
        CREATE OR REPLACE FUNCTION check_category_depth()
        RETURNS trigger AS $$
        DECLARE
            depth INT := 1;
            current_id INT := NEW.parent_id;
        BEGIN
            WHILE current_id IS NOT NULL LOOP
                depth := depth + 1;
                IF depth > 3 THEN
                    RAISE EXCEPTION 'Category nesting exceeds 3 levels';
                END IF;
                SELECT parent_id INTO current_id FROM category WHERE id = current_id;
            END LOOP;
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
    """
    )
    op.execute(
        """
        CREATE TRIGGER category_depth_limit
        BEFORE INSERT OR UPDATE ON category
        FOR EACH ROW EXECUTE FUNCTION check_category_depth();
    """
    )

    op.execute(
        """
        INSERT INTO category (parent_id, name)
        VALUES
        (NULL, 'Еда'),
        (NULL, 'Автомобили'),
        (1, 'Мясная продукция'),
        (1, 'Молочная продукция'),
        (2, 'Грузовые'),
        (2, 'Легковые'),
        (6, 'Запчасти'),
        (6, 'Аксессуары')
        ON CONFLICT DO NOTHING;
    """
    )
    op.execute(
        """
        INSERT INTO address (coordinates, country, city, street, home)
        VALUES
        (ST_GeogFromText('SRID=4326;POINT(37.6102 55.7616)'), 'Россия', 'Москва', 'Тверская', '7'),
        (ST_GeogFromText('SRID=4326;POINT(37.6077 55.7619)'), 'Россия', 'Москва', 'Леонтьевский пер.', '26'),
        (ST_GeogFromText('SRID=4326;POINT(37.6072 55.7616)'), 'Россия', 'Москва', 'Леонтьевский пер.', '24'),
        (ST_GeogFromText('SRID=4326;POINT(37.6135 55.7656)'), 'Россия', 'Москва', 'Петровский пер.', '10')
        ON CONFLICT DO NOTHING;
    """
    )
    op.execute(
        """
        INSERT INTO organization (name, address_id)
        VALUES
        ('ООО "Рога и копыта"', 1),
        ('Парикмахерская "Наталья"', 2),
        ('Пункт выдачи Озон', 3),
        ('Шаурма "У дома"', 4),
        ('Светофор', 3)
        ON CONFLICT DO NOTHING;
    """
    )
    op.execute(
        """
        INSERT INTO organization_category (org_id, cat_id)
        VALUES
        (1, 7),
        (2, 3),
        (3, 7),
        (3, 8),
        (4, 1),
        (5, 2)
        ON CONFLICT DO NOTHING;
    """
    )
    op.execute(
        """
        INSERT INTO phone_number (number, org_id)
        VALUES
        ('11-11-11', 1),
        ('11-11-12', 1),
        ('22-22-22', 2),
        ('8-800-22-22-22', 2),
        ('+7-987', 3),
        ('37-23-41', 3),
        ('444', 4),
        ('911', 5)
        ON CONFLICT DO NOTHING;
    """
    )
    op.execute(
        """
        INSERT INTO api_key (user_id, api_key)
        VALUES
        (1, 'cb94747ada8c7d337aada765050bda1a3b2889695168f476eebec93c06a5e1f5'),
        (2, '65283c1868b48f0fd0f5e1a1f698cab34c4110add1c218fe0a81c2fe018d3735')
        ON CONFLICT DO NOTHING;
    """
    )


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP TRIGGER category_depth_limit ON category")
    op.execute("DROP FUNCTION check_category_depth()")
    op.drop_table("phone_number")
    op.drop_table("organization_category")
    op.drop_index("idx_org_name_trgm", table_name="organization")
    op.drop_table("organization")
    op.drop_table("category")
    op.drop_index(
        "idx_address_coordinates", table_name="address", postgresql_using="gist"
    )
    op.drop_table("address")
    # ### end Alembic commands ###
